# Copyright 2018-2019 Open-MMLab. All rights reserved.

import os.path as osp
import shutil
import tempfile
import time

import mmcv
import torch
import torch.distributed as dist
from mmcv.runner import get_dist_info


def single_gpu_test(model,
                    data_loader, progress=False):
    
    model.eval()
    results = []
    results = []
    dataset = data_loader.dataset
    if progress:
        prog_bar = mmcv.ProgressBar(len(dataset))
    
    time.sleep(2)  # This line can prevent deadlock problem in some cases.
    for i, data in enumerate(data_loader):
        with torch.no_grad():
            result = model(return_loss=False, **data)
        # if the result is an array uncomment the blow lines
            # results.extend((result.unsqueeze(axis=0)).tolist())
        # for down-stream task uncomment the below line
            results.extend(result)
        if progress:
            prog_bar.update()
    return results


def multi_gpu_test(model, data_loader, tmpdir=None, progress=False):
    """Test model with multiple gpus.

    This method tests model with multiple gpus and collects the results
    under two different modes: gpu and cpu modes. By setting 'gpu_collect=True'
    it encodes results to gpu tensors and use gpu communication for results
    collection. On cpu mode it saves the results on different gpus to 'tmpdir'
    and collects them by the rank 0 worker.

    Args:
        model (nn.Module): Model to be tested.
        data_loader (nn.Dataloader): Pytorch data loader.
        tmpdir (str): Path of directory to save the temporary results from
            different gpus under cpu mode.
    Returns:
        list: The prediction results.
    """
    model.eval()
    results = []
    dataset = data_loader.dataset

    rank, world_size = get_dist_info()
    if rank == 0 and progress:
        prog_bar = mmcv.ProgressBar(len(dataset))

    time.sleep(2)  # This line can prevent deadlock problem in some cases.
    for i, data in enumerate(data_loader):
        with torch.no_grad():
            # result = model(**data)
            result = model(return_loss=False, **data)
        # if results is an array uncomment the below line
            # results.extend((result.unsqueeze(axis=0)).tolist())
        # for down-stream task uncomment the below line
            results.extend(result)

        if rank == 0 and progress:
            # batch_size = len(result.item())
            batch_size = 1
            for _ in range(batch_size * world_size):
                prog_bar.update()

    results = collect_results_cpu(results, len(dataset), tmpdir)
    
    
    return results


def collect_results_cpu(result_part, size, tmpdir=None):
    rank, world_size = get_dist_info()
    # create a tmp dir if it is not specified
    if tmpdir is None:
        MAX_LEN = 512
        # 32 is whitespace
        dir_tensor = torch.full((MAX_LEN, ),
                                32,
                                dtype=torch.uint8,
                                device='cuda')
        if rank == 0:
            tmpdir = tempfile.mkdtemp()
            tmpdir = torch.tensor(
                bytearray(tmpdir.encode()), dtype=torch.uint8, device='cuda')
            dir_tensor[:len(tmpdir)] = tmpdir
        dist.broadcast(dir_tensor, 0)
        tmpdir = dir_tensor.cpu().numpy().tobytes().decode().rstrip()
    else:
        mmcv.mkdir_or_exist(tmpdir)
    # dump the part result to the dir
    mmcv.dump(result_part, osp.join(tmpdir, f'part_{rank}.pkl'))
    dist.barrier()
    # collect all parts
    if rank != 0:
        # part_list = []
        # for i in range(world_size):
        #     part_file = osp.join(tmpdir, f'part_{i}.pkl')
        #     part_list.append(mmcv.load(part_file))
        # # sort the results
        # ordered_results = []
        # for res in zip(*part_list):
        #     ordered_results.extend(list(res))
        # # the dataloader may pad some samples
        # ordered_results = ordered_results[:size]
        # # remove tmp dir
        # # shutil.rmtree(tmpdir)
        # return ordered_results
        return None
    else:
        # load results of all parts from tmp dir
        part_list = []
        for i in range(world_size):
            part_file = osp.join(tmpdir, f'part_{i}.pkl')
            part_list.append(mmcv.load(part_file))
        # sort the results
        ordered_results = []
        for res in zip(*part_list):
            ordered_results.extend(list(res))
        # the dataloader may pad some samples
        ordered_results = ordered_results[:size]
        # remove tmp dir
        shutil.rmtree(tmpdir)
        return ordered_results
